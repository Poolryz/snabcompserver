const express = require("express");
const cors = require("cors");

// ะกะพะทะดะฐะตะผ ัะบะทะตะผะฟะปัั ะฟัะธะปะพะถะตะฝะธั
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware CORS
app.use(cors());

// Middleware ะดะปั ะฟะฐััะธะฝะณะฐ JSON
app.use(express.json());

// Middleware ะดะปั ะฟะฐััะธะฝะณะฐ URL-encoded ะดะฐะฝะฝัั
app.use(express.urlencoded({ extended: true }));

// GET - ะะพะปััะธัั ะฒัะต ััะตัะฐ (ั ะฟัะฐะฒะธะปัะฝัะผะธ ะฝะฐะทะฒะฐะฝะธัะผะธ ะฟะพะปะตะน)
app.get("/api/invoices", async (req, res) => {
  try {
    const invoices = await Invoice.findAll({
      order: [["invoiceDate", "DESC"]],
    });

    // ะัะตะพะฑัะฐะทัะตะผ ะดะฐัั ะฒ ะฝัะถะฝัะน ัะพัะผะฐั ะดะปั ััะพะฝัะตะฝะดะฐ
    const formattedInvoices = invoices.map((invoice) => ({
      id: invoice.id,
      invoiceDate: formatDateForFrontend(invoice.invoiceDate),
      organization: invoice.organization,
      invoiceNumber: invoice.invoiceNumber,
      amount: invoice.amount,
      paymentDate: formatDateForFrontend(invoice.paymentDate),
      responsible: invoice.responsible,
      note: invoice.note,
    }));

    res.json(formattedInvoices);
  } catch (error) {
    console.error("ะัะธะฑะบะฐ:", error);
    res.status(500).json({ error: "ะัะธะฑะบะฐ ะฟัะธ ะฟะพะปััะตะฝะธะธ ััะตัะพะฒ" });
  }
});

// GET - ะะพะปััะธัั ััะตั ะฟะพ ID
app.get("/api/invoices/:id", async (req, res) => {
  try {
    const invoice = await Invoice.findByPk(req.params.id);
    if (!invoice) {
      return res.status(404).json({ error: "ะกัะตั ะฝะต ะฝะฐะนะดะตะฝ" });
    }

    const formattedInvoice = {
      id: invoice.id,
      invoiceDate: formatDateForFrontend(invoice.invoiceDate),
      organization: invoice.organization,
      invoiceNumber: invoice.invoiceNumber,
      amount: invoice.amount,
      paymentDate: formatDateForFrontend(invoice.paymentDate),
      responsible: invoice.responsible,
      note: invoice.note,
    };

    res.json(formattedInvoice);
  } catch (error) {
    res.status(500).json({ error: "ะัะธะฑะบะฐ ะฟัะธ ะฟะพะปััะตะฝะธะธ ััะตัะฐ" });
  }
});

// POST - ะกะพะทะดะฐัั ะฝะพะฒัะน ััะตั
app.post("/api/invoices", async (req, res) => {
  try {
    const {
      invoiceDate,
      organization,
      invoiceNumber,
      amount,
      paymentDate,
      responsible,
      note,
    } = req.body;

    // ะะฐะปะธะดะฐัะธั
    if (!invoiceDate || !organization || !invoiceNumber || !amount) {
      return res.status(400).json({
        error:
          "ะะฑัะทะฐัะตะปัะฝัะต ะฟะพะปั: invoiceDate, organization, invoiceNumber, amount",
      });
    }

    const invoice = await Invoice.create({
      invoiceDate: parseDateFromFrontend(invoiceDate),
      organization,
      invoiceNumber,
      amount,
      paymentDate: paymentDate ? parseDateFromFrontend(paymentDate) : null,
      responsible,
      note,
    });

    res.status(201).json({
      id: invoice.id,
      invoiceDate: formatDateForFrontend(invoice.invoiceDate),
      organization: invoice.organization,
      invoiceNumber: invoice.invoiceNumber,
      amount: invoice.amount,
      paymentDate: formatDateForFrontend(invoice.paymentDate),
      responsible: invoice.responsible,
      note: invoice.note,
    });
  } catch (error) {
    if (error.name === "SequelizeUniqueConstraintError") {
      return res
        .status(400)
        .json({ error: "ะกัะตั ั ัะฐะบะธะผ ะฝะพะผะตัะพะผ ัะถะต ัััะตััะฒัะตั" });
    }
    console.error("ะัะธะฑะบะฐ ัะพะทะดะฐะฝะธั:", error);
    res.status(500).json({ error: "ะัะธะฑะบะฐ ะฟัะธ ัะพะทะดะฐะฝะธะธ ััะตัะฐ" });
  }
});

// PUT - ะะฑะฝะพะฒะธัั ััะตั
app.put("/api/invoices/:id", async (req, res) => {
  try {
    const invoice = await Invoice.findByPk(req.params.id);
    if (!invoice) {
      return res.status(404).json({ error: "ะกัะตั ะฝะต ะฝะฐะนะดะตะฝ" });
    }

    // ะะพะดะณะพัะฐะฒะปะธะฒะฐะตะผ ะดะฐะฝะฝัะต ะดะปั ะพะฑะฝะพะฒะปะตะฝะธั
    const updateData = { ...req.body };

    // ะัะตะพะฑัะฐะทัะตะผ ะดะฐัั ะตัะปะธ ะพะฝะธ ะฟัะธัะปะธ
    if (updateData.invoiceDate) {
      updateData.invoiceDate = parseDateFromFrontend(updateData.invoiceDate);
    }
    if (updateData.paymentDate) {
      updateData.paymentDate = parseDateFromFrontend(updateData.paymentDate);
    }

    await invoice.update(updateData);

    // ะะพะทะฒัะฐัะฐะตะผ ะพััะพัะผะฐัะธัะพะฒะฐะฝะฝัะน ะพัะฒะตั
    const formattedInvoice = {
      id: invoice.id,
      invoiceDate: formatDateForFrontend(invoice.invoiceDate),
      organization: invoice.organization,
      invoiceNumber: invoice.invoiceNumber,
      amount: invoice.amount,
      paymentDate: formatDateForFrontend(invoice.paymentDate),
      responsible: invoice.responsible,
      note: invoice.note,
    };

    res.json(formattedInvoice);
  } catch (error) {
    res.status(500).json({ error: "ะัะธะฑะบะฐ ะฟัะธ ะพะฑะฝะพะฒะปะตะฝะธะธ ััะตัะฐ" });
  }
});

// DELETE - ะฃะดะฐะปะธัั ััะตั (ะพััะฐะตััั ะฑะตะท ะธะทะผะตะฝะตะฝะธะน)
app.delete("/api/invoices/:id", async (req, res) => {
  try {
    const invoice = await Invoice.findByPk(req.params.id);
    if (!invoice) {
      return res.status(404).json({ error: "ะกัะตั ะฝะต ะฝะฐะนะดะตะฝ" });
    }

    await invoice.destroy();
    res.json({ message: "ะกัะตั ัะดะฐะปะตะฝ" });
  } catch (error) {
    res.status(500).json({ error: "ะัะธะฑะบะฐ ะฟัะธ ัะดะฐะปะตะฝะธะธ ััะตัะฐ" });
  }
});

// ะัะฟะพะผะพะณะฐัะตะปัะฝัะต ััะฝะบัะธะธ ะดะปั ัะฐะฑะพัั ั ะดะฐัะฐะผะธ
function formatDateForFrontend(date) {
  if (!date) return null;
  return new Date(date).toISOString().split("T")[0]; // "2024-01-15"
}

function parseDateFromFrontend(dateString) {
  if (!dateString) return null;
  return new Date(dateString);
}

// ะะฑัะฐะฑะพัะบะฐ 404 ะพัะธะฑะบะธ
app.use((req, res) => {
  res.status(404).json({
    error: "ะะฐััััั ะฝะต ะฝะฐะนะดะตะฝ",
    path: req.originalUrl,
    method: req.method,
  });
});

// ะะฐะทะพะฒะฐั ะพะฑัะฐะฑะพัะบะฐ ะพัะธะฑะพะบ
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    error: "ะะฝัััะตะฝะฝัั ะพัะธะฑะบะฐ ัะตัะฒะตัะฐ",
  });
});

// ะะฐะฟััะบ ัะตัะฒะตัะฐ
app.listen(PORT, () => {
  console.log(`๐ ะกะตัะฒะตั ะทะฐะฟััะตะฝ ะฝะฐ ะฟะพััั ${PORT}`);
  console.log(`๐ ะะพััะฟัะตะฝ ะฟะพ ะฐะดัะตัั: http://localhost:${PORT}`);
});
